generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Users {
    id            String          @id @default(cuid())
    user_id       String          @unique
    name          String
    role          Role
    school_year   Int?
    email         String          @unique
    password      String
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Lesson_list Lesson_list[]
    Timetable   Timetable[]
    Lesson      Lesson[]
    sentPosts   Post[]        @relation("TeacherRelation")
    Reciever    Chat[]        @relation("RecievedMessages")
    Sender      Chat[]        @relation("SentMessages")
}

model Roadmap {
    id          String    @id @default(cuid())
    lesson_code String
    lesson_name String
    credits     Int
    type        TypesGP?
    semester    Semester?
    school_year Int?
}

model Lesson_list {
    id String @id @default(cuid())

    lesson_code String    @unique
    lesson_name String
    credits     Int
    description String?
    teacher     Users?    @relation(fields: [teacher_id], references: [user_id])
    teacher_id  String?
    school_year Int?
    type        TypesGP?
    semester    Semester?

    Timetable Timetable[]
    Lesson    Lesson[]
}

model Lesson {
    id Int @id @default(autoincrement())

    lessonCode  String
    title       String
    description String?
    pdfUrl      String? // PDF URL
    videoUrl    String?
    school_year Int?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    teacherId   String
    Code        Lesson_list @relation(fields: [lessonCode], references: [lesson_code])

    Id Users @relation(fields: [teacherId], references: [user_id])
}

model Timetable {
    id          Int         @id @default(autoincrement())
    lesson_code String
    teacher_id  String
    weekdays    WeekDay
    start_time  String
    end_time    String
    school_year Int // Талбарыг зөв тодорхойлж байна
    lesson      Lesson_list @relation(fields: [lesson_code], references: [lesson_code], onDelete: Cascade)
    teacher     Users       @relation(fields: [teacher_id], references: [user_id], onDelete: Cascade)
}

model Post {
    post_id     Int      @id @default(autoincrement())
    teacher_id  String
    teacher     Users    @relation("TeacherRelation", fields: [teacher_id], references: [user_id], onDelete: Cascade)
    title       String?
    body        String?
    created_at  DateTime @default(now())
    school_year Int?
}

model Chat {
    chat_id     Int      @id @default(autoincrement())
    sender_id   String
    sender      Users    @relation("SentMessages", fields: [sender_id], references: [user_id], onDelete: Cascade)
    reciever_id String
    reciever    Users    @relation("RecievedMessages", fields: [reciever_id], references: [user_id], onDelete: Cascade)
    message     String
    created_at  DateTime @default(now())
}

model Schedule {
    id        String   @id @default(cuid()) // Хуучин ID
    event     String // Үйл явдлын нэр (жишээ: "Lecture on Math")
    date      DateTime // Үйл явдлын огноо
    createdAt DateTime @default(now()) // Бүртгэгдсэн огноо
    updatedAt DateTime @updatedAt // Сүүлд шинэчлэгдсэн огноо
}

enum WeekDay {
    Даваа
    Мягмар
    Лхагва
    Пүрэв
    Баасан
}

enum Semester {
    Хавар
    Намар
}

enum TypesGP {
    Gen
    Pro
}

enum Role {
    teacher
    student
    admin
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
<<<<<<< HEAD
=======

model Post {
    post_id     Int      @id @default(autoincrement())
    teacher_id  String
    teacher     Users    @relation("TeacherRelation", fields: [teacher_id], references: [user_id], onDelete: Cascade)
    title       String?
    body        String?
    created_at  DateTime @default(now())
    school_year Int?
}

model Chat {
    chat_id     Int      @id @default(autoincrement())
    sender_id   String
    sender      Users    @relation("SentMessages", fields: [sender_id], references: [user_id], onDelete: Cascade)
    reciever_id String
    reciever    Users    @relation("RecievedMessages", fields: [reciever_id], references: [user_id], onDelete: Cascade)
    message     String
    created_at  DateTime @default(now())
}
>>>>>>> e55b6adfd72468ec03cd44da5d9e2744d0f61fc6
